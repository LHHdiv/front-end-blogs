export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"博客主页","i":"home","title":"博客主页"},["/README.md"]],
  ["v-22ebce24","/interviews.html",{"c":["Javascript"],"e":"<!----------------- HTML&CSS区域 ----------------->\n<!---------------- Javascript区域 ----------------->\n<h2> JS 的数据类型以及判断方法</h2>\n<details class=\"hint-container details\"><summary>JS 的数据类型以及判断方法</summary>\n<h4> 数据类型</h4>\n<ul>\n<li>Number（数字）</li>\n<li>String（字符串）</li>\n<li>Boolean（布尔值：true &amp; false）</li>\n<li>undefined（undefined）</li>\n<li>null（null）</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></details>","y":"a","t":"面试题","i":"laptop-code","O":1,"title":"面试题"},[":md"]],
  ["v-3776468a","/project-config.html",{"c":["config"],"g":["MD文件配置"],"e":"<h2> markdown 文件的 YAML 配置相关</h2>\n<p><strong>注意：如果单个 md 文件不使用 YAML 语法，则需要使用# + title 的方式开始，这样可以识别#后的内容作为侧边栏内容</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>type</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>当前 md 文件的名称，会显示在侧边栏</td>\n</tr>\n<tr>\n<td>index</td>\n<td>boolean</td>\n<td>控制当前 md 文件是否会显示在侧边栏</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>string</td>\n<td>当前 md 文件名称的图标，提前引入图表库在线资源</td>\n</tr>\n<tr>\n<td>category</td>\n<td>string</td>\n<td>当前 md 文件分类</td>\n</tr>\n<tr>\n<td>tag</td>\n<td>string</td>\n<td>当前 md 文件的标签</td>\n</tr>\n<tr>\n<td>order</td>\n<td>number</td>\n<td>文章顺序，数字最小级别越高</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"MD语法","i":"webpack","O":0,"I":0,"title":"MD语法"},[":md"]],
  ["v-e02a086e","/javascript/",{"c":["Javascript"],"y":"a","t":"Javascript","i":"laptop-code","title":"Javascript"},["/javascript/README.md"]],
  ["v-423856ea","/javascript/class.html",{"c":["Javascript"],"e":"\n<!-- 设置了YAML语法之后，就不用## 定义title了，会重复显示 -->\n<!-- ## Class 类 -->\n<h2> 传统的构造函数</h2>\n<ol>\n<li>例子(面向对象中：将下面对一个对象的所有成员的定义，统称为类)</li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 构造函数(构造器)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 定义示例方法(原型方法)</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">【种类】: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">【名字】: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">【年龄】: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">【性别】: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'狗'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'小花'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span>，<span class=\"token string\">'公'</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 遍历(会遍历到原型上的属性)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 打印出type，name, age, sex, print</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"class类","i":"laptop-code","title":"class类"},[":md"]],
  ["v-a07ea476","/javascript/ecmascriptNewType.html",{"c":["Javascript"],"e":"<h2> 变量声明</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">var (ES5 及以前使用的关键字)</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">let 关键字</p>\n<p><mark>会生成一个块级作用域的变量</mark></p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">const 关键字</p>\n</div>","y":"a","t":"ECMAscript新特性","i":"laptop-code","title":"ECMAscript新特性"},[":md"]],
  ["v-c1f5b978","/javascript/eventLoop.html",{"c":["Javascript"],"e":"<!-- ## EventLoop(加载时间线) -->\n","y":"a","t":"EventLoop","i":"laptop-code","title":"EventLoop"},[":md"]],
  ["v-ddb16596","/javascript/handwriting.html",{"c":["Javascript"],"e":"<h2> 手写 call 方法（myCall）</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">回顾 call() 用法</p>\n<p><strong>1. 改变 this 指向，接收多个参数，其中第一个参数是代表 this 的指向，剩余参数都是函数的参数</strong><br>\n<strong>2. 如下示例：test.call(obj)，此时 test 的调用方是 obj 对象，所以 this 指向 obj</strong><br>\n<strong>3. 非严格模式下，第一个参数为 null/undefined 时，this 指向 window</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"call用法\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以用形参的方式接收参数，也可以用arguments接收参数</span>\n<span class=\"token comment\">// function test() {</span>\n<span class=\"token comment\">//   console.log(this.value, ...arguments);</span>\n<span class=\"token comment\">//   console输出：call用法 测试传递参数1 传递参数2</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// console输出：call用法 测试传递参数1 传递参数2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"测试传递参数1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递参数2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>上述示例等同于如下写法,把 test 方法指向到对象 obj 内部，使用 obj.test()去执行</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"call用法\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>","y":"a","t":"手写js方法","i":"laptop-code","title":"手写js方法"},[":md"]],
  ["v-14fb0ae0","/javascript/scoped.html",{"c":["Javascript"],"e":"\n<h2> 原型&amp;原型链</h2>\n<p><mark>每个函数都有一个 prototype 属性</mark><br>\n<mark>null 为顶点，没有__proto__属性</mark></p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">什么是原型</p>\n<ol>\n<li>任何一个 JS 对象中创建时会关联的一个对象，null 除外（null 为顶点）</li>\n<li>任何根据原型的构造函数创建出来的对象，都会继承原型上的属性</li>\n</ol>\n</div>\n<h4> 示例：创建一个构造函数</h4>","y":"a","t":"this&原型","i":"laptop-code","O":0,"title":"this&原型"},[":md"]],
  ["v-3dda3dde","/javascript/test.html",{"e":"<h2> 两种响应式对比</h2>\n<h4> 👩‍🚀 Vue2: Object.defineProperty</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 简单的使用</span>\n<span class=\"token keyword\">const</span> initData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>initData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问：\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> initData<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      initData<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 访问：value</span>\ndata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 修改：value</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-1bf867bc","/expand/",{"c":["expand"],"e":"<!-- ## vue 知识目录 -->\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">[设计原则]</p>\n<p><a href=\"/expand/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/SOLID.html\" target=\"blank\">SOLID设计原则</a></p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">[设计模式 目录]</p>\n<p><a href=\"/expand/%E7%AE%97%E6%B3%95/sort.html\" target=\"blank\">排序算法</a></p>\n</div>","y":"a","t":"进阶提升","title":"进阶提升"},["/expand/README.md"]],
  ["v-3a07ddea","/expand/SOLID.html",{"e":"<h3> S：单⼀职责原则（Single Responsibility Principle）</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>通过解耦让每一个模块职责更加独立</li>\n<li>目标：一个功能模块只做一件事</li>\n</ul>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">示例</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// create game store</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PUBGManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 弹窗方法</span>\n  <span class=\"token function\">openDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 计算金额</span>\n    <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PUBGManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngame<span class=\"token punctuation\">.</span><span class=\"token function\">openDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//弹窗之后计算金额，此时弹窗和计算金额 两个模块耦合</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>","y":"a","t":"SOLID设计原则","O":0,"title":"SOLID设计原则"},[":md"]],
  ["v-88155d1a","/project/01-css.html",{"y":"a","t":""},[":md"]],
  ["v-ac9354d6","/css-md/",{"c":["css"],"y":"a","t":"CSS","i":"css","title":"CSS"},["/css-md/README.md"]],
  ["v-2e7b5910","/css-md/border.html",{"c":["node"],"y":"a","t":"盒模型","i":"nodejs","O":1,"title":"盒模型"},[":md"]],
  ["v-08ef768b","/css-md/flex.html",{"c":["css"],"y":"a","t":"Flex 布局","i":"nodejs","O":2,"title":"Flex 布局"},[":md"]],
  ["v-67f463be","/package-build/",{"c":["build"],"y":"a","t":"打包构建","i":"laptop-code","title":"打包构建"},["/package-build/README.md"]],
  ["v-e8c55052","/nodes/",{"c":["node"],"y":"a","t":"NodeJS","i":"nodejs","title":"NodeJS"},["/nodes/README.md"]],
  ["v-384e2a02","/nodes/node01.html",{"e":"<h1> node01</h1>\n<p>开启 node 之旅</p>\n","y":"a","t":"node01","title":"node01"},[":md"]],
  ["v-34e478c4","/nodes/node02.html",{"e":"<h1> node02</h1>\n","y":"a","t":"node02","title":"node02"},[":md"]],
  ["v-53de0e76","/typescript/01%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E7%9A%84%E5%89%AF%E6%9C%AC.html",{"y":"a","t":"数据库系统"},["/typescript/01数据库系统概述的副本.html","/typescript/01数据库系统概述的副本.md",":md"]],
  ["v-6da6abb1","/typescript/",{"c":["Javascript"],"e":"<h2> ES6 根文件</h2>\n","y":"a","t":"Typescript","i":"laptop-code","title":"Typescript"},["/typescript/README.md"]],
  ["v-1374c017","/typescript/base.html",{"c":["Typescript"],"e":"<h2> TS 类型注解</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">内容</p>\n<ul>\n<li>TS 是 JS 的超集，提供了 JS 所有的功能，并且额外增加了<strong>类型系统</strong></li>\n<li>TS 类型系统可以显示标记出代码中的意外行为，让开发者在开发过程中就可以看到错误并改正，从而降低运行时发生错误的可能性</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 这里的:string就是类型注解，约定了变量name的类型只能是字符串格式</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"小L\"</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> ts 基础语法</h4>\n<p>let 变量名:类型注解 = 变量值<br>\n示例：;</p>\n</div>","y":"a","t":"TS类型","i":"laptop-code","title":"TS类型"},[":md"]],
  ["v-3b2383f1","/typescript/genericity.html",{"c":["Typescript"],"e":"<h2> 泛型概念</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<ul>\n<li>泛型是可以在保证类型安全的前提下，让函数等与多种类型一起工作，从而实现复用</li>\n<li>常用于函数、接口、class 中</li>\n</ul>\n<p>示例：定义一个 getValue 方法，传入一个值，返回这个值</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token doc-comment comment\">/**\n * 1. getValue函数此时只能传number类型的参数,失去了通用性\n * 2. 但是如果把number改为any类型，返回值也变成了any，失去了TS的安全性\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><mark>使用泛型解决上面 getValue 的问题</mark></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 语法：在函数名和参数的括号之间写一个&lt;T&gt;</span>\n\n<span class=\"token comment\"># 在声明的时候，变量T的类型是不知道的</span>\n<span class=\"token comment\"># {&lt;T&gt;}：声明泛型(通常使用T)</span>\n<span class=\"token comment\"># {val: T}  使用泛型</span>\n<span class=\"token comment\"># 调用getValue 函数时，传入泛型指定的具体类型</span>\n<span class=\"token keyword\">function</span> getValue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>val: T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin class-name\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ngetValue<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出number类型的123</span>\ngetValue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出string类型的abc</span>\ngetValue<span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出boolean类型的false</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>","y":"a","t":"TS泛型","i":"laptop-code","title":"TS泛型"},[":md"]],
  ["v-71631428","/typescript/ts01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"c":["Typescript"],"e":"<h2> 基础数据类型</h2>\n<h4> 字符串</h4>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"字符串\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出：字符串，string</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"ts01-数据类型","i":"laptop-code","title":"ts01-数据类型"},["/typescript/ts01-数据类型.html","/typescript/ts01-数据类型.md",":md"]],
  ["v-ab2a127c","/reacts/",{"c":["react"],"y":"a","t":"React框架","i":"react","title":"React框架"},["/reacts/README.md"]],
  ["v-9f954fb4","/reacts/base.html",{"e":"<h1> React 基础语法</h1>\n","y":"a","t":"React 基础语法","title":"React 基础语法"},[":md"]],
  ["v-42870f14","/universityNote/",{"e":"<p>计算机科学与技术</p>\n","y":"a","t":""},["/universityNote/README.md"]],
  ["v-15788ec9","/vues/",{"c":["Vue"],"y":"a","t":"Vue","i":"laptop-code","title":"Vue"},["/vues/README.md"]],
  ["v-b6a91b5c","/expand/designPatterns/",{"c":["expand"],"e":"<!-- ## vue 知识目录 -->\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">[设计模式 目录]</p>\n<p><a href=\"/expand/designPatterns/creationalDesignPatterns/singletonPattern.html\" target=\"blank\">单例模式</a></p>\n</div>\n","y":"a","t":"设计模式","title":"设计模式"},["/expand/designPatterns/README.md"]],
  ["v-ec8885d0","/expand/%E7%AE%97%E6%B3%95/sort.html",{"y":"a","t":"排序算法","O":0,"title":"排序算法"},["/expand/算法/sort.html","/expand/算法/sort.md",":md"]],
  ["v-7c925216","/package-build/rollup/",{"c":["build"],"g":["rollup"],"y":"a","t":"Rollup打包","i":"laptop-code","title":"Rollup打包"},["/package-build/rollup/README.md"]],
  ["v-57752e4a","/package-build/rollup/rollup01.html",{"c":["build"],"g":["rollup"],"y":"a","t":"rollup01","i":"laptop-code","title":"rollup01"},[":md"]],
  ["v-0983b0fa","/package-build/webpack/",{"c":["build"],"g":["webpack"],"y":"a","t":"Webpack打包","i":"laptop-code","title":"Webpack打包"},["/package-build/webpack/README.md"]],
  ["v-c00d1ca4","/package-build/webpack/webpack01.html",{"c":["build"],"g":["webpack"],"y":"a","t":"webpack01","i":"laptop-code","title":"webpack01"},[":md"]],
  ["v-28fdef3c","/vues/v2/computed.html",{"e":"<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>测试下代码模板<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"计算属性 computed","O":2,"title":"计算属性 computed"},[":md"]],
  ["v-b1540b7c","/vues/v2/mixin.html",{"c":["vue"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">mixin(混入) 是什么</p>\n<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。(可以理解为，把vue组件中的script内容提出来了一份js文件，拥有vue的生命周期、数据状态)</p>\n</div>\n<h2> 基础示例</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 定义一个myMixin混入对象</span>\n<span class=\"token keyword\">let</span> myMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,I am myMixin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 定义一个使用混入对象的组件</span>\n<span class=\"token keyword\">let</span> Component <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mixin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>myMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> component <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 会在加载结束后，created声明周期输出内容hello,I am myMixin</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Mixin(混入) & Transition(过渡)","i":"vue","title":"Mixin(混入) & Transition(过渡)"},[":md"]],
  ["v-34387711","/vues/v2/slot.html",{"e":"\n<h2> 基础用法</h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>插槽分为具名插槽和非具名插槽</p>\n</div>\n<h4> 使用 slot 标签定义一个非具名插槽</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// vue项目中创建一个components/SlotComp.vue插槽组件</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>slot<span class=\"token operator\">&gt;</span>我是插槽的占位数据<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"插槽slot（Vue2）","title":"插槽slot（Vue2）"},[":md"]],
  ["v-ae2c7a98","/vues/v2/watch.html",{"e":"<h4> 测试数学公式</h4>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>N</mi></munderover><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>g</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mtext>d</mtext><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\n\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.106em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.599em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\">d</span></span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>","y":"a","t":"watch监听","O":0,"title":"watch监听"},[":md"]],
  ["v-408d3345","/vues/v3/asycnComponent.html",{"c":["Vue"],"y":"a","t":"Vue3异步组件","i":"laptop-code","O":1,"title":"Vue3异步组件"},[":md"]],
  ["v-c3ff4b80","/vues/v3/compositionAPI.html",{"c":["Vue"],"e":"<h2> 什么是 Composition API(组合式)</h2>\n<h4> 选项式 API</h4>\n<ul>\n<li>基于对象: 组件的各个方面都是在一个对象中进行声明,如 data、methods、computed、watch 等</li>\n<li>逻辑分散: 相关的逻辑可能在不同的选项中分散，难以迅速理解组件的整体逻辑</li>\n<li>语法较早：这是 Vue.js 最早期的编写组件的方式，现在仍然支持</li>\n</ul>\n<h4> 组合式 API</h4>\n<ul>\n<li>基于函数：组件的逻辑被封装在函数中，称为 \"Composition Function\"</li>\n<li>逻辑集中：相关逻辑可以在同一个 Composition Function 中进行组合，提高了代码的可读性和维护性</li>\n<li>更灵活：可以更方便地共享逻辑、重用代码，以及在不同组件之间更容易地组织和调整代码</li>\n</ul>","y":"a","t":"组合式API","i":"laptop-code","O":1,"title":"组合式API"},[":md"]],
  ["v-1d2bd324","/vues/v3/customDirective.html",{"c":["Vue"],"y":"a","t":"Vue3自定义指令","i":"laptop-code","O":3,"title":"Vue3自定义指令"},[":md"]],
  ["v-2d8a4d63","/vues/v3/customHooks.html",{"c":["Vue"],"y":"a","t":"Vue3-Hooks","i":"laptop-code","O":5,"title":"Vue3-Hooks"},[":md"]],
  ["v-0e7c31d8","/vues/v3/lifecycle.html",{"c":["Vue"],"e":"<h2> vue2 vs vue3 对比</h2>\n<table>\n<thead>\n<tr>\n<th>vue2</th>\n<th>vue3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate、created</td>\n<td>setup,在 beforeCreate 和 created 前，因此一般在组合式 API 中使用它做一些前置处理</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnMount</td>\n<td>onBeforeUnMount</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"Vue3生命周期","i":"laptop-code","O":2,"title":"Vue3生命周期"},[":md"]],
  ["v-2741875f","/vues/v3/telelport.html",{"c":["Vue"],"y":"a","t":"模板传送","i":"laptop-code","O":4,"title":"模板传送"},[":md"]],
  ["v-c5a544ee","/universityNote/database/01%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html",{"c":["database"],"e":"<h4> Tips: 课程考核目标</h4>\n<blockquote>\n<p>识记：识别和记忆概念性内容，如各种数据库原理相关的术语、定义、特点、分类、组成、过程等。 ------ 20%占比</p>\n</blockquote>\n<blockquote>\n<p>领会：领会数据库有关的基本概述和基本原理的内涵及外延，理解概念、原理的确切含义和适应条件，能够鉴别关于概念和原理的似是而非的说法。</p>\n<p>----- 30%占比</p>\n</blockquote>\n<blockquote>\n<p>简单应用：根据已知的数据库基本概念等基础知识，分析和解决问题。 ----- 30%占比</p>\n</blockquote>","y":"a","t":"01-数据库系统概述","i":"laptop-code","title":"01-数据库系统概述"},["/universityNote/database/01数据库系统概述.html","/universityNote/database/01数据库系统概述.md",":md"]],
  ["v-7ef56605","/universityNote/database/02%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93.html",{"c":["database"],"y":"a","t":"02-关系型数据库","i":"laptop-code","title":"02-关系型数据库"},["/universityNote/database/02关系型数据库.html","/universityNote/database/02关系型数据库.md",":md"]],
  ["v-408016e3","/universityNote/database/03%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.html",{"c":["database"],"y":"a","t":"03-数据库设计","i":"laptop-code","title":"03-数据库设计"},["/universityNote/database/03数据库设计.html","/universityNote/database/03数据库设计.md",":md"]],
  ["v-2c7375eb","/universityNote/database/04SQL%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html",{"c":["database"],"y":"a","t":"04-SQL与关系型数据库基本操作","i":"laptop-code","title":"04-SQL与关系型数据库基本操作"},["/universityNote/database/04SQL与关系型数据库基本操作.html","/universityNote/database/04SQL与关系型数据库基本操作.md",":md"]],
  ["v-7f46f89b","/universityNote/database/05%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B.html",{"c":["database"],"y":"a","t":"05-数据库编程","i":"laptop-code","title":"05-数据库编程"},["/universityNote/database/05数据库编程.html","/universityNote/database/05数据库编程.md",":md"]],
  ["v-d5babfe8","/universityNote/database/06%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E4%B8%8E%E4%BF%9D%E6%8A%A4.html",{"c":["database"],"y":"a","t":"06-数据库安全与保护","i":"laptop-code","title":"06-数据库安全与保护"},["/universityNote/database/06数据库安全与保护.html","/universityNote/database/06数据库安全与保护.md",":md"]],
  ["v-5f63d871","/universityNote/database/07%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B.html",{"c":["database"],"y":"a","t":"07-数据库应用设计与开发实例","i":"laptop-code","title":"07-数据库应用设计与开发实例"},["/universityNote/database/07数据库应用设计与开发实例.html","/universityNote/database/07数据库应用设计与开发实例.md",":md"]],
  ["v-18a47b04","/universityNote/database/08%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95.html",{"c":["database"],"y":"a","t":"08-数据管理技术的发展","i":"laptop-code","title":"08-数据管理技术的发展"},["/universityNote/database/08数据管理技术的发展.html","/universityNote/database/08数据管理技术的发展.md",":md"]],
  ["v-57cc8762","/expand/designPatterns/creationalDesignPatterns/singletonPattern.html",{"c":["expand"],"e":"<h2> 单例模式</h2>\n","y":"a","t":"单例模式","i":"nodejs","O":0,"title":"单例模式"},[":md"]],
  ["v-7fac1b77","/expand/designPatterns/creationalDesignPatterns/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html",{"y":"a","t":""},["/expand/designPatterns/creationalDesignPatterns/建造者模式.html","/expand/designPatterns/creationalDesignPatterns/建造者模式.md",":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0,"title":"分类"},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0,"title":"标签"},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0,"title":"文章"},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0,"title":"收藏"},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0,"title":"时间轴"},[]],
  ["v-e2bac56c","/category/javascript/",{"y":"p","t":"Javascript 分类","I":0,"title":"Javascript 分类"},[]],
  ["v-5635fdae","/tag/md%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/",{"y":"p","t":"标签: MD文件配置","I":0,"title":"标签: MD文件配置"},["/tag/md文件配置/"]],
  ["v-90963bd6","/category/config/",{"y":"p","t":"config 分类","I":0,"title":"config 分类"},[]],
  ["v-461d8149","/tag/rollup/",{"y":"p","t":"标签: rollup","I":0,"title":"标签: rollup"},[]],
  ["v-30f6f1bd","/category/expand/",{"y":"p","t":"expand 分类","I":0,"title":"expand 分类"},[]],
  ["v-6318deb0","/tag/webpack/",{"y":"p","t":"标签: webpack","I":0,"title":"标签: webpack"},[]],
  ["v-65ee2aa4","/category/css/",{"y":"p","t":"css 分类","I":0,"title":"css 分类"},[]],
  ["v-58702955","/category/node/",{"y":"p","t":"node 分类","I":0,"title":"node 分类"},[]],
  ["v-bd1c64ce","/category/build/",{"y":"p","t":"build 分类","I":0,"title":"build 分类"},[]],
  ["v-6c5e4d32","/category/typescript/",{"y":"p","t":"Typescript 分类","I":0,"title":"Typescript 分类"},[]],
  ["v-884bc6b0","/category/react/",{"y":"p","t":"react 分类","I":0,"title":"react 分类"},[]],
  ["v-65f6d381","/category/vue/",{"y":"p","t":"Vue 分类","I":0,"title":"Vue 分类"},[]],
  ["v-8f1cfe08","/category/database/",{"y":"p","t":"database 分类","I":0,"title":"database 分类"},[]],
]
