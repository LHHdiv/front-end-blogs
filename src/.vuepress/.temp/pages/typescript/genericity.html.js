export const data = JSON.parse("{\"key\":\"v-3b2383f1\",\"path\":\"/typescript/genericity.html\",\"title\":\"TS泛型\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"TS泛型\",\"index\":true,\"icon\":\"laptop-code\",\"category\":[\"Typescript\"],\"description\":\"泛型概念 相关信息 泛型是可以在保证类型安全的前提下，让函数等与多种类型一起工作，从而实现复用 常用于函数、接口、class 中 示例：定义一个 getValue 方法，传入一个值，返回这个值 /** * 1. getValue函数此时只能传number类型的参数,失去了通用性 * 2. 但是如果把number改为any类型，返回值也变成了any，失去了TS的安全性 */ function getValue(value: number) { return value; } getValue(123); 使用泛型解决上面 getValue 的问题 # 语法：在函数名和参数的括号之间写一个&lt;T&gt; # 在声明的时候，变量T的类型是不知道的 # {&lt;T&gt;}：声明泛型(通常使用T) # {val: T} 使用泛型 # 调用getValue 函数时，传入泛型指定的具体类型 function getValue&lt;T&gt;(val: T) { console.log(val) return val; } getValue&lt;number&gt;(123) # 输出number类型的123 getValue&lt;string&gt;('abc') # 输出string类型的abc getValue&lt;boolean&gt;(false) # 输出boolean类型的false\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.mashimaro.top/typescript/genericity.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"TS泛型\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"泛型概念 相关信息 泛型是可以在保证类型安全的前提下，让函数等与多种类型一起工作，从而实现复用 常用于函数、接口、class 中 示例：定义一个 getValue 方法，传入一个值，返回这个值 /** * 1. getValue函数此时只能传number类型的参数,失去了通用性 * 2. 但是如果把number改为any类型，返回值也变成了any，失去了TS的安全性 */ function getValue(value: number) { return value; } getValue(123); 使用泛型解决上面 getValue 的问题 # 语法：在函数名和参数的括号之间写一个&lt;T&gt; # 在声明的时候，变量T的类型是不知道的 # {&lt;T&gt;}：声明泛型(通常使用T) # {val: T} 使用泛型 # 调用getValue 函数时，传入泛型指定的具体类型 function getValue&lt;T&gt;(val: T) { console.log(val) return val; } getValue&lt;number&gt;(123) # 输出number类型的123 getValue&lt;string&gt;('abc') # 输出string类型的abc getValue&lt;boolean&gt;(false) # 输出boolean类型的false\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"LJK\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"TS泛型\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"LJK\\\",\\\"url\\\":\\\"http://www.mashimaro.top/\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"泛型概念\",\"slug\":\"泛型概念\",\"link\":\"#泛型概念\",\"children\":[]},{\"level\":2,\"title\":\"泛型函数 (简化函数)\",\"slug\":\"泛型函数-简化函数\",\"link\":\"#泛型函数-简化函数\",\"children\":[]},{\"level\":2,\"title\":\"泛型--类型约束\",\"slug\":\"泛型-类型约束\",\"link\":\"#泛型-类型约束\",\"children\":[]},{\"level\":2,\"title\":\"添加约束\",\"slug\":\"添加约束\",\"link\":\"#添加约束\",\"children\":[]},{\"level\":2,\"title\":\"泛型--多个类型变量\",\"slug\":\"泛型-多个类型变量\",\"link\":\"#泛型-多个类型变量\",\"children\":[]},{\"level\":2,\"title\":\"泛型接口\",\"slug\":\"泛型接口\",\"link\":\"#泛型接口\",\"children\":[]}],\"readingTime\":{\"minutes\":3.86,\"words\":1158},\"filePathRelative\":\"typescript/genericity.md\",\"excerpt\":\"<h2> 泛型概念</h2>\\n<div class=\\\"hint-container info\\\">\\n<p class=\\\"hint-container-title\\\">相关信息</p>\\n<ul>\\n<li>泛型是可以在保证类型安全的前提下，让函数等与多种类型一起工作，从而实现复用</li>\\n<li>常用于函数、接口、class 中</li>\\n</ul>\\n<p>示例：定义一个 getValue 方法，传入一个值，返回这个值</p>\\n<div class=\\\"language-javascript line-numbers-mode\\\" data-ext=\\\"js\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token doc-comment comment\\\">/**\\n * 1. getValue函数此时只能传number类型的参数,失去了通用性\\n * 2. 但是如果把number改为any类型，返回值也变成了any，失去了TS的安全性\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token literal-property property\\\">value</span><span class=\\\"token operator\\\">:</span> number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><p><mark>使用泛型解决上面 getValue 的问题</mark></p>\\n<div class=\\\"language-bash line-numbers-mode\\\" data-ext=\\\"sh\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\"># 语法：在函数名和参数的括号之间写一个&lt;T&gt;</span>\\n\\n<span class=\\\"token comment\\\"># 在声明的时候，变量T的类型是不知道的</span>\\n<span class=\\\"token comment\\\"># {&lt;T&gt;}：声明泛型(通常使用T)</span>\\n<span class=\\\"token comment\\\"># {val: T}  使用泛型</span>\\n<span class=\\\"token comment\\\"># 调用getValue 函数时，传入泛型指定的具体类型</span>\\n<span class=\\\"token keyword\\\">function</span> getValue<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">(</span>val: T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console.log<span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token builtin class-name\\\">return</span> val<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\ngetValue<span class=\\\"token operator\\\">&lt;</span>number<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># 输出number类型的123</span>\\ngetValue<span class=\\\"token operator\\\">&lt;</span>string<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># 输出string类型的abc</span>\\ngetValue<span class=\\\"token operator\\\">&lt;</span>boolean<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># 输出boolean类型的false</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
